{
	"name": "smfRecordDataFlow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "SrcSnowflakeMobilityCoreSMF_FEDERATE_PROD",
						"type": "DatasetReference"
					},
					"name": "streamOfSMFRecords"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "SinkADXMobilityCore_SMF_FEDERATE_PROD",
						"type": "DatasetReference"
					},
					"name": "sinkToADX"
				},
				{
					"dataset": {
						"referenceName": "SinkADXMobilityCore_SMF_FEDERATE_PROD",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "checkTransform"
				},
				{
					"name": "parse1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          SF_LOAD_TS_EST as string,",
				"          RECORD_CONTENT as string,",
				"          RECORD_METADATA as string,",
				"          {METADATA$ACTION} as string,",
				"          {METADATA$ISUPDATE} as string,",
				"          {METADATA$ROW_ID} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> streamOfSMFRecords",
				"streamOfSMFRecords split(!regexMatch(RECORD_CONTENT,'\\\"job\\\": \\\"pfcp\\\",'),",
				"     disjoint: false) ~> checkTransform@(checkTransform, transformBeforeSink)",
				"checkTransform@transformBeforeSink parse(RECORD_CONTENT = replace(RECORD_CONTENT,'\\\"tags\\\": {\\\",','\\\"tags\\\": {\\\"appName\\\": \\\"smfcc_interface\\\",' ) ? string,",
				"     format: 'json',",
				"     documentForm: 'documentPerLine') ~> parse1",
				"checkTransform@checkTransform sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          SF_LOAD_TS_EST as timestamp,",
				"          TIME as timestamp,",
				"          FED_UNIQUE_NAME as string,",
				"          APPNAME as string,",
				"          DNN as string,",
				"          SNSSAI as string,",
				"          CAUSECODE as string,",
				"          POD as string,",
				"          PEERID as string,",
				"          SMFCC_NSMF_SMPOLICY_CONTROL_CREATE_SERVICE_ATTEMPTS as long,",
				"          SMFCC_NSMF_SMPOLICY_CONTROL_CREATE_SERVICE_SUCCESS as long,",
				"          SMFCC_NSMF_SMPOLICY_CONTROL_CREATE_SERVICE_FAILURES as long,",
				"          SMFCC_NSMF_SMPOLICY_CONTROL_UPDATE_SERVICE_ATTEMPTS as long,",
				"          SMFCC_NSMF_SMPOLICY_CONTROL_UPDATE_SERVICE_SUCCESS as long,",
				"          SMFCC_NSMF_SMPOLICY_CONTROL_UPDATE_SERVICE_FAILURES as long,",
				"          SMFCC_NSMF_SMPOLICY_CONTROL_DELETE_SERVICE_ATTEMPTS as long,",
				"          SMFCC_NSMF_SMPOLICY_CONTROL_DELETE_SERVICE_SUCCESS as long,",
				"          SMFCC_NSMF_SMPOLICY_CONTROL_DELETE_SERVICE_FAILURES as long,",
				"          SMFCC_NSMF_SMPOLICY_CONTROL_UPDATE_NOTIFY_ATTEMPTS as long,",
				"          SMFCC_NSMF_SMPOLICY_CONTROL_UPDATE_NOTIFY_SUCCESS as long,",
				"          SMFCC_NSMF_SMPOLICY_CONTROL_UPDATE_NOTIFY_FAILURES as long,",
				"          SMFCC_NSMF_SMPOLICY_CONTROL_TERMINATE_NOTIFY_ATTEMPTS as long,",
				"          SMFCC_NSMF_SMPOLICY_CONTROL_TERMINATE_NOTIFY_SUCCESS as long,",
				"          SMFCC_NSMF_SMPOLICY_CONTROL_TERMINATE_NOTIFY_FAILURES as long,",
				"          RECEIVED_FILE_NAME as string,",
				"          FILE_ROW_NUMBER as long",
				"     ),",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sinkToADX",
				"parse1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          SF_LOAD_TS_EST as timestamp,",
				"          TIME as timestamp,",
				"          FED_UNIQUE_NAME as string,",
				"          APPNAME as string,",
				"          DNN as string,",
				"          SNSSAI as string,",
				"          CAUSECODE as string,",
				"          POD as string,",
				"          PEERID as string,",
				"          SMFCC_NSMF_SMPOLICY_CONTROL_CREATE_SERVICE_ATTEMPTS as long,",
				"          SMFCC_NSMF_SMPOLICY_CONTROL_CREATE_SERVICE_SUCCESS as long,",
				"          SMFCC_NSMF_SMPOLICY_CONTROL_CREATE_SERVICE_FAILURES as long,",
				"          SMFCC_NSMF_SMPOLICY_CONTROL_UPDATE_SERVICE_ATTEMPTS as long,",
				"          SMFCC_NSMF_SMPOLICY_CONTROL_UPDATE_SERVICE_SUCCESS as long,",
				"          SMFCC_NSMF_SMPOLICY_CONTROL_UPDATE_SERVICE_FAILURES as long,",
				"          SMFCC_NSMF_SMPOLICY_CONTROL_DELETE_SERVICE_ATTEMPTS as long,",
				"          SMFCC_NSMF_SMPOLICY_CONTROL_DELETE_SERVICE_SUCCESS as long,",
				"          SMFCC_NSMF_SMPOLICY_CONTROL_DELETE_SERVICE_FAILURES as long,",
				"          SMFCC_NSMF_SMPOLICY_CONTROL_UPDATE_NOTIFY_ATTEMPTS as long,",
				"          SMFCC_NSMF_SMPOLICY_CONTROL_UPDATE_NOTIFY_SUCCESS as long,",
				"          SMFCC_NSMF_SMPOLICY_CONTROL_UPDATE_NOTIFY_FAILURES as long,",
				"          SMFCC_NSMF_SMPOLICY_CONTROL_TERMINATE_NOTIFY_ATTEMPTS as long,",
				"          SMFCC_NSMF_SMPOLICY_CONTROL_TERMINATE_NOTIFY_SUCCESS as long,",
				"          SMFCC_NSMF_SMPOLICY_CONTROL_TERMINATE_NOTIFY_FAILURES as long,",
				"          RECEIVED_FILE_NAME as string,",
				"          FILE_ROW_NUMBER as long",
				"     ),",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}